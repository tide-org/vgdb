[x] add session log file
[x] start at entrypoint option
[x] integrate docker debugging
[x] add register view buffer and update with step
[x] add source for os-specific test binaries
[x] establish if symbols file found from starup
[x] fix session log when run command run multiple times in one call - eg Vgrte
[x] add a session log view buffer and update with step
[x] add vim startup variables - start and connect, start and run to entrypoint (must specify binary)
[x] add option to run command before startup of vgdb - eg. docker container with gdbserver
[x] make buffers non-modifiable by user
[x] format disassembly output for debug and match step output to current line (with highlight)
[x] add highlight for changed register values between operations
[x] do various buffer/display.vim refactoring
[x] start Vgdis at current breakpoint if loaded - from entrypoint
[x] fix Vgdis opening in side window when no empty buffer (should stack in main window)
[x] refactor py vgdb into separate classes
[x] get list of breakpoints
[x] add piets for breakpoints in gutter (as per http://vimdoc.sourceforge.net/htmldoc/sign.html)
[x] make breakpoints show in vg_disassembly without vg_breakpoints open
[x] add Vgcont to continue
[x] use register to write to buffer instead of append() (like NerdTree)
[x] add tests using [vimrunner](https://github.com/AndrewRadev/vimrunner) and add to as required
[x] add breakpoints view buffer and update with step
[x] add fix for macos using Vgrte: https://stackoverflow.com/questions/40110435/unknown-ending-signal-when-using-debugger-gdb - done - https://stackoverflow.com/a/52450255/512965
[x] add option for stacking/abutting extra windows
[x] detect symbols in files
[x] add open buffers at startup option
[x] find empty buffer for loading source code
[x] split window handling into separate autoload vim file
[x] add disassembly output buffer ( add to empty buffer or abutt)
[n] abstract the four types of buffer - default register, streaming/log, debug window, breakpoint
    could be conidered as:
      refreshed/iterated     - register or memory and comparison before/after
      appended/continued     - session log
      controlled/structured  - disassembly or other where output is modified
      used/derrived          - breakpoint where output is used for another window or status buffer
    useful for config
[x] add custom vg_ buffer name, filter, command
[x] better error handling on dictionary keys (when missing), rename g:vg_config_template_...
[x] genericise filter.filter_query_result
[x] add a configurable YAML template for different uses
[x] make tty timeout a config setting
[x] add watchpoints view buffer and update with step
[x] get session log buffer name from config file
[x] fix session log truncating and not scrolling
[x] refactor vg_display for readability
[x] define session log from config file
[x] refactor out g:vg_query_result
[x] remove the need for g:vg_filtered_buffers
[x] fix vg_session_log not starting on_startup
[x] allow diff-buffers (e.g. registers comparison)
[x] replace poyo with pyyaml
[x] make command steps an array of steps
[x] add nose tests for python components
[x] make all config_dicts call Config()
[x] implement 2-way event-driven vim to python variables - py to vim working - to implement reverse as required
[x] make plugins directory moveable
[x] allow defaults for config variables
[x] make startup command be done from config
[x] move target remote to config
[x] move check_set_remote to config file
[x] create functions to trigger all events for different areas - before/after command, buffer updates, spawn and config commands - done for most, needs documenting
[x] refactor run_to_entrypoint into config.yml
[x] make 'config_command' step
[x] make create_string step
[x] make 'run_command_string' step
[x] make 'run_command' step
[x] make 'run_command_with_match' step
[x] make 'python_function' step
[x] make 'vim_function' step
[x] make 'command_with_match' step
[x] make variables in config at startup
[x] move vg_display diasssembly code to commands config
[x] refactor out most vim global vars
[x] refactor vg_config_buffers to use dict
[x] refactor vg_display code for disassemble into separate file/class
[x] refactor diff code to separate vg_diff.vim
[x] investigate buffer_name stuff in vgdb.py - why is it used? - can now use for an initial buffer or force to buffer
[n] move disassembly.vim into plugins or python where possible - not doing (for now)
[x] refactor Vgdis into config file
[n] make calls to run config command call back to vim to give option to update buffers as well (or call update_buffers from python) - not required as is run after last config command anyway
[x] refactor disassembly to be generic and in config template
[x] refactor step, break, run, etc. to be generic and in config template
[x] create command plugin architecture - e.g. run to entrypoint, command events - eg stepi
[x] refactor command_handler move post-command logic into separate class (check_set_remote) into command_processing (events) plugin path overrides for after_spawn and after_command
[x] create actions pluggable and have built-in actions as well as functions plugins path
[x] implement error condition handling from output stream
[x] handle case where disassemble does not know the end address of a section of assembly - 'No function contains program counter for selected frame.' - see (https://stackoverflow.com/questions/8201025/no-function-contains-program-counter-for-selected-frame/16629694) - sort of done - could be better though
[x] wire up all the config yaml functions
[n] delineate buffer startup commands vs refresh commands . e.g. disassemble calling info file each time - maybe later
[x] step into disassembly code properly (when there are calls)
[x] create a 'when' config option for running extra commands conditionally
[x] add scripting plugin support
[x] refactor vg_display into smaller classes
[x] create command for graceful shutdown of vgdb
[x] refactor vim code to use config_dictionary['buffers'] instead of vg_config_buffers
[x] create memory buffer
[x] add a debug action
[x] add a set variable option
[x] make disassembly range static until refresh - currently changing every instruction
[x] allow (fix) running ad-hoc commands
[x] add ability to set a breakpoint from vim terminal
[x] remove action: from config - all actions to use indentation
[x] add timestamp option to logs
[x] make all buffers have their own query result variables (in python dict) - diff, session_log, and each variable
[x] create 'internal' section of config_dictionary for internal variables, session logs, etc.
[x] refactor buffer_input vars into 'buffer_variables' config_dictionary section under internal
[x] create a cache variables config section
[x] add ability to set one variable from another
[x] add variable substitution to set_var command
[x] fix diff (vg_registers)
[x] make buffers only update when set in config with 'update_buffers'
[x] make Vgdisplaybuf vg_registers split to correct window (was working)
[x] allow both strings and variables as input_args for vim and python
[x] add after events to buffers
[x] move diff to plugins/functions path
[x] bp, piets to plugins/functions path
[n] look into reusable plugins repo - maybe later
[x] allow primary window to be started on_startup withour error
[x] create a vgdb internals debugging builtin buffer
[n] create a circular file/path visulalisation graph showing commit changes over time and descriptions (not doing as part of this)
[n] add option to only update registers and memory buffers when relevant commands have been run (step, stepi, continue, run, etc.) - not needed - over optimisation (see Knuth)
[n] optimise calls to get breakpoints only when required (adding/removing) - same
[n] move scroll to plugins/functions path - not doing as is a part of vg_session_log
[n] speed up diff, breakpoints and piets (currently very slow) - to do later
[x] get dependencies working inside docker - python3 vim support, gdb, etc
[x] add error checking , do some defensive null checking
[x] fix single quote errors with docker container run
[x] get app working in docker container
[x] fix other py to vim parsing errors between py 3.6 and 3.7 in config.py
[x] use vader.vim for tests and install python3
[x] fix again for macos and keep working with docker - was ok
[x] fix string error with 0x00000000000000ne - when timeout occurs
[n] test and get working for before spawn events - not so easy - holding off on
[x] migrate highlight colour to config file
[x] make highlight line colour configurable
[x] make diff line colours configurable
[n] use regex for more precise string replacements in config.py vim config_dictionary updates - not doing as per https://stackoverflow.com/questions/5668947/use-pythons-string-replace-vs-re-sub
[x] add proper error handling to eval() when conditions
[x] allow source config file to work from any path
[x] make a runnable vimrunner test for registers window - requires getting gdb to run in a third container - tests working in container
[x] add xserver to docker-compose containers to make tests self-contained - not required as using Vader now
[x] add highlight for changed memory values between operations - using diff this works
[x] add memory view buffers and update with step (requires variables for number, format, variable/register, etc.)
[x] create a docker image with vgdb working in for demonstrating - test containers do this
[n] refactor breakpoints and piets setting to use python (may be faster) - maybe later not important right now
[x] integrate jinja2 for variable and string substitution/manipulation - good example here - https://github.com/wilvk/jinja/blob/master/examples/basic/test_loop_filter.py
[n] extrapolate pexpect as interchangeable with other libraries and define functionality from config (e.g. for streams/logs/apis, etc. )
[x] remove events: options where not possible (e.g. before startup Vgdb() has not been initialised yet), and where not used
[x] refactor command handler to call config_command for events (e.g. get_set_remote)
[x] get pyyaml working correctly from autoload/lib path
[n] use vim event loop for `BufUnload` when closing `vg_` buffers to prevent using bwipeout when fetching data (https://www.ibm.com/developerworks/library/l-vim-script-5/index.html)
[n] standardise event calling in config events: vs buffer_name.events:
[n] create a vgdb variables builtin buffer
[x] create a yaml merge function
[n] create a yaml defaults file to merge first ( to prevent defaults missing causing errors )
[y] add ability to create split yaml files that are joined up
[x] set remote_target correctly for docker tests
[x] fix piets not showing for breakpoints
[x] split command_handler into separate smaller classes for events, spawn/tty, filtering
[x] refactor out command args logic into separate class to pass between static classes
[n] create test for vg_python#get_python_command_for_event
[x] make all config_command_item fields @properties and clean up unused fields
[x] refactor command action into separate class
[n] option to open new window splits as new disassembly is added.
[x] standardise all python classes with __ for private methods
[n] convert all dictionary retrieves to get() python and vimscript - or create a safe get function
[x] merge path_helpers and plugin_helpers
[x] modify run_vim_function so it doesn't need to specify the file as well as the full function name
[x] split ide config into separate config file from disassembly
[x] refactor command_handler
[x] create a wrapper for multiple editors
[x] remove vim config_location and place in a yaml file
[x] create a test mock editor for testing
[x] implement debugging output
[x] implement config volume for docker python tests
[x] implement debugging options specified in config settings yaml
[x] refactor command_action to have buffer name and args_dict passed in at initialisation
[x] fix broken disassembly output showing too many lines initially
