[x] add session log file
[x] start at entrypoint option
[x] integrate docker debugging
[x] add register view buffer and update with step
[x] add source for os-specific test binaries
[x] establish if symbols file found from starup
[x] fix session log when run command run multiple times in one call - eg Vgrte
[x] add a session log view buffer and update with step
[x] add vim startup variables - start and connect, start and run to entrypoint (must specify binary)
[x] add option to run command before startup of vgdb - eg. docker container with gdbserver
[x] make buffers non-modifiable by user
[x] format disassembly output for debug and match step output to current line (with highlight)
[x] add highlight for changed register values between operations
[x] do various buffer/display.vim refactoring
[x] start Vgdis at current breakpoint if loaded - from entrypoint
[x] fix Vgdis opening in side window when no empty buffer (should stack in main window)
[x] refactor py vgdb into separate classes
[x] get list of breakpoints
[x] add piets for breakpoints in gutter (as per http://vimdoc.sourceforge.net/htmldoc/sign.html)
[x] make breakpoints show in vg_disassembly without vg_breakpoints open
[x] add Vgcont to continue
[x] use register to write to buffer instead of append() (like NerdTree)
[x] add tests using [vimrunner](https://github.com/AndrewRadev/vimrunner) and add to as required
[x] add breakpoints view buffer and update with step
[x] add fix for macos using Vgrte: https://stackoverflow.com/questions/40110435/unknown-ending-signal-when-using-debugger-gdb - done - https://stackoverflow.com/a/52450255/512965
[x] add option for stacking/abutting extra windows
[x] detect symbols in files
[x] add open buffers at startup option
[x] find empty buffer for loading source code
[x] split window handling into separate autoload vim file
[x] add disassembly output buffer ( add to empty buffer or abutt)
[n] abstract the four types of buffer - default register, streaming/log, debug window, breakpoint
    could be conidered as:
      refreshed/iterated     - register or memory and comparison before/after
      appended/continued     - session log
      controlled/structured  - disassembly or other where output is modified
      used/derrived          - breakpoint where output is used for another window or status buffer
    useful for config
[x] add custom vg_ buffer name, filter, command
[x] better error handling on dictionary keys (when missing), rename g:vg_config_template_...
[x] genericise filter.filter_query_result
[x] add a configurable YAML template for different uses
[x] make tty timeout a config setting
[x] add watchpoints view buffer and update with step
[x] get session log buffer name from config file
[x] fix session log truncating and not scrolling
[x] refactor vg_display for readability
[x] define session log from config file
[x] refactor out g:vg_query_result
[x] remove the need for g:vg_filtered_buffers
[x] fix vg_session_log not starting on_startup
[x] allow diff-buffers (e.g. registers comparison)
[x] replace poyo with pyyaml
[x] make command steps an array of steps
[x] add nose tests for python components
[x] make all config_dicts call Config()
[x] implement 2-way event-driven vim to python variables - py to vim working - to implement reverse as required
[x] make plugins directory moveable
[x] allow defaults for config variables
[x] make startup command be done from config
[x] move target remote to config
[x] move check_set_remote to config file
[x] create functions to trigger all events for different areas - before/after command, buffer updates, spawn and config commands - done for most, needs documenting
[x] refactor run_to_entrypoint into config.yml
[x] make 'config_command' step
[x] make create_string step
[x] make 'run_command_string' step
[x] make 'run_command' step
[x] make 'run_command_with_match' step
[x] make 'python_function' step
[x] make 'vim_function' step
[x] make 'command_with_match' step
[x] make variables in config at startup
[x] move vg_display diasssembly code to commands config
[x] refactor out most vim global vars
[x] refactor vg_config_buffers to use dict
[x] refactor vg_display code for disassemble into separate file/class
[x] refactor diff code to separate vg_diff.vim
[x] investigate buffer_name stuff in vgdb.py - why is it used? - can now use for an initial buffer or force to buffer
[n] move disassembly.vim into plugins or python where possible - not doing (for now)
[x] refactor Vgdis into config file
[n] make calls to run config command call back to vim to give option to update buffers as well (or call update_buffers from python) - not required as is run after last config command anyway
[x] refactor disassembly to be generic and in config template
[x] refactor step, break, run, etc. to be generic and in config template
[x] create command plugin architecture - e.g. run to entrypoint, command events - eg stepi
[x] refactor command_handler move post-command logic into separate class (check_set_remote) into command_processing (events) plugin path overrides for after_spawn and after_command
[x] create actions pluggable and have built-in actions as well as functions plugins path
[x] implement error condition handling from output stream
[x] handle case where disassemble does not know the end address of a section of assembly - 'No function contains program counter for selected frame.' - see (https://stackoverflow.com/questions/8201025/no-function-contains-program-counter-for-selected-frame/16629694) - sort of done - could be better though
[x] wire up all the config yaml functions
[n] delineate buffer startup commands vs refresh commands . e.g. disassemble calling info file each time - maybe later
[x] step into disassembly code properly (when there are calls)
[x] create a 'when' config option for running extra commands conditionally
[x] add scripting plugin support
[x] refactor vg_display into smaller classes
[x] create command for graceful shutdown of vgdb
[x] refactor vim code to use config_dictionary['buffers'] instead of vg_config_buffers
[x] create memory buffer
[x] add a debug action
[x] add a set variable option
[x] make disassembly range static until refresh - currently changing every instruction
[x] allow (fix) running ad-hoc commands
[x] add ability to set a breakpoint from vim terminal
[x] remove action: from config - all actions to use indentation
[x] add timestamp option to logs
[x] make all buffers have their own query result variables (in python dict) - diff, session_log, and each variable
[x] create 'internal' section of config_dictionary for internal variables, session logs, etc.
[x] refactor buffer_input vars into 'buffer_variables' config_dictionary section under internal
[x] create a cache variables config section
[x] add ability to set one variable from another
[x] add variable substitution to set_var command
[x] fix diff (vg_registers)
[x] make buffers only update when set in config with 'update_buffers'
[x] make Vgdisplaybuf vg_registers split to correct window (was working)
[x] allow both strings and variables as input_args for vim and python
[x] add after events to buffers
[x] move diff to plugins/functions path
[x] bp, piets to plugins/functions path
[n] look into reusable plugins repo - maybe later
[x] allow primary window to be started on_startup withour error
[x] create a vgdb internals debugging builtin buffer
[n] create a circular file/path visulalisation graph showing commit changes over time and descriptions (not doing as part of this)
[n] add option to only update registers and memory buffers when relevant commands have been run (step, stepi, continue, run, etc.) - not needed - over optimisation (see Knuth)
[n] optimise calls to get breakpoints only when required (adding/removing) - same
[n] move scroll to plugins/functions path - not doing as is a part of vg_session_log
[n] speed up diff, breakpoints and piets (currently very slow) - to do later
[x] get dependencies working inside docker - python3 vim support, gdb, etc
[x] add error checking , do some defensive null checking
[x] fix single quote errors with docker container run
[x] get app working in docker container
[x] fix other py to vim parsing errors between py 3.6 and 3.7 in config.py
[x] use vader.vim for tests and install python3
[x] fix again for macos and keep working with docker - was ok
[x] fix string error with 0x00000000000000ne - when timeout occurs
[n] test and get working for before spawn events - not so easy - holding off on
[x] migrate highlight colour to config file
[x] make highlight line colour configurable
[x] make diff line colours configurable
[n] use regex for more precise string replacements in config.py vim config_dictionary updates - not doing as per https://stackoverflow.com/questions/5668947/use-pythons-string-replace-vs-re-sub
[x] add proper error handling to eval() when conditions
[x] allow source config file to work from any path
[x] make a runnable vimrunner test for registers window - requires getting gdb to run in a third container - tests working in container
[x] add xserver to docker-compose containers to make tests self-contained - not required as using Vader now
[x] add highlight for changed memory values between operations - using diff this works
[x] add memory view buffers and update with step (requires variables for number, format, variable/register, etc.)
[x] create a docker image with vgdb working in for demonstrating - test containers do this
[n] refactor breakpoints and piets setting to use python (may be faster) - maybe later not important right now
[x] integrate jinja2 for variable and string substitution/manipulation - good example here - https://github.com/wilvk/jinja/blob/master/examples/basic/test_loop_filter.py
[n] extrapolate pexpect as interchangeable with other libraries and define functionality from config (e.g. for streams/logs/apis, etc. )
[x] remove events: options where not possible (e.g. before startup Vgdb() has not been initialised yet), and where not used
[x] refactor command handler to call config_command for events (e.g. get_set_remote)
[x] get pyyaml working correctly from autoload/lib path
[n] use vim event loop for `BufUnload` when closing `vg_` buffers to prevent using bwipeout when fetching data (https://www.ibm.com/developerworks/library/l-vim-script-5/index.html)
[n] standardise event calling in config events: vs buffer_name.events:
[n] create a vgdb variables builtin buffer
[x] create a yaml merge function
[n] create a yaml defaults file to merge first ( to prevent defaults missing causing errors )
[y] add ability to create split yaml files that are joined up
[x] set remote_target correctly for docker tests
[x] fix piets not showing for breakpoints
[x] split command_handler into separate smaller classes for events, spawn/tty, filtering
[x] refactor out command args logic into separate class to pass between static classes
[n] create test for vg_python#get_python_command_for_event
[x] make all config_command_item fields @properties and clean up unused fields
[x] refactor command action into separate class
[n] option to open new window splits as new disassembly is added.
[x] standardise all python classes with __ for private methods
[n] convert all dictionary retrieves to get() python and vimscript - or create a safe get function
[x] merge path_helpers and plugin_helpers
[x] modify run_vim_function so it doesn't need to specify the file as well as the full function name
[x] split ide config into separate config file from disassembly
[x] refactor command_handler
[x] create a wrapper for multiple editors
[x] remove vim config_location and place in a yaml file
[x] create a test mock editor for testing
[x] implement debugging output
[x] implement config volume for docker python tests
[x] implement debugging options specified in config settings yaml
[x] refactor command_action to have buffer name and args_dict passed in at initialisation
[x] fix broken vader test
[x] create module to read from config without instantiating Config so logging_decorator can log all classes
[x] add option to overwrite debug file at startup - not as option though, deletes always
[x] fix broken disassembly output showing too many lines initially
[x] fix static instances not showing in debug log correctly
[x] fix up config settings logging correctly
[x] add decorator to all class functions automatically (except class itself and have an exclusion list - done at class level and wrapps individual functions for modules.
[n] add exception handling to logging - todo later
[x] refactor config_source - not needed, written that way deliberately
[x] implement json output for debug logging - look into this - https://logmatic.io/blog/python-logging-with-json-steroids/ 
[x] abstract class caller into separate class - used in action, editor_wrapper, filter, etc. - no need - all used slightly differently
[n] add error handling to all class methods - where appropriate - can do in decorator - to do later
[x] make logging filters configurable from yaml file - in command_handler.get_filtered_output
[x] add proper cross-cutting logging for command_handler, config_command, et al. - see https://stackoverflow.com/questions/12356713/aspect-oriented-programming-aop-in-python and https://python-aspectlib.readthedocs.io/en/latest/examples.html#debugging
[x] add a settings.debug section to config
[x] change settings.plugins.<paths> to be relative to the current config path or absolute
[x] allow config location to be specified as an environment variable - done - VGDB_CONFIG_LOCATION
[x] make plugins/filters/functions paths be relative to the config path location
[x] add a defaults yaml file so that full config doesn't need to be specified
[x] move yaml files into a separate path
[n] look into adding a loggers section to the config for system log, errors and anything else to be logged at discretion
[n] investigate whether filter functionality can be added to the config yaml - not doing - syntax for filtering text via jinja is overly complicated
[n] look into moving (or having as an alternative) filters into config using jinja2
[n] refactor to allow multiple loggers error, session_log, other, etc. - not doing - no need
[n] determine best tty setting by testing (or fix not to catch exception on complete stream)
[n] create tests for command_handler to try to speed up pexpect calls/reads
[n] add a backtrace buffer window (bt in gdb)
    add local variables view buffer and update with step
    add a status view buffer and update with step (to show os, bitness, target, target status, entrypoint addressi, current address)
    add segments view buffer ( no update with step)
    add sections view buffer ( no update with step)
    add call stack view buffer and update with step (only if symbols loaded)
    add thread view buffer and update with step
    add edit memory values functionality
    add edit variable values functionality
    (all one piece of work - may do later)
[x] add match group numbers to run_command_with_match
[n] test and add better support for local binaries (not remote) - already present with gdb 8.2.1
[x] add action for updating a buffer from a file
[x] harden all config file yaml input to prevent errors on missing values - done with defaults yaml file
[x] make plugin paths work regardless of which path vim was started from
[x] get a basic c hello world app debugging correctly - done! - :Vgdb, then :VgRunConfigCommand set_breakpoint, :VgRunConfigCommand run, :VgRunConfigCommand step
[x] get working with higher level C code
[x] add ability to scan for all source files for a binary
[x] add debugging source functionality and open the source files if present (start with .s files)
[n] add editable variables/settings screen buffer
[n] add edit register values functionality - do from run_command first (as in VgEdit register eax 0x00000034) - not yet
[n] add update_on_commands list for buffers - buffers that are updated when specific commands are run (saves updating every time there is a command) - there are workarounds for this currently
[x] add gdb supported higher level languages support
[n] add ability to list all source files as tabs or using NerdTree
[n] add gdb error/warning buffer view and update with step
[n] add goto definition functionality - there are already plugins for this
[n] allow plugins from different languages - e.g. python, ruby, C, elixir, scala, .net, etc. - too vague
[x] fix failing tests
[n] have ability to have end_of_output_regex on a per-command level (would overwrite default) - e.g. for ssh login etc. - not yet, no required use case atm
[x] create more tests - vader and nose - later
[x] add a variable logging framework with verbosity and area options - sort of done
[n] fix vg_registers in docker container - need to split on "\n", not \r but join lines and remove start and end ~ quotations - seems to be ok
[n] add the ability to patch up disassemblies to a single buffer when switching to range - maybe sort list as well - not now - more useful to do languages support atm
[n] use async functions for events (if necessary) - not doing - would warp reality as i know it
[x] add option to show line numbers for a buffer
[n] add option for buffer to be a filename and editable (but only when not debugging) - won't do yet - would be a bit messy
[n] create tests for config_command buffers, actions and events - not doing now - todo once py code is in separate repo
[x] cleanup plugin/commands.vim
[x] add piets to C test
[x] add ability to display file in vg_code buffer
[x] fix up C example config - piet breakpoints, local variables buffer
[x] add local variables buffer to C test
[x] add abillity to set breakpoints in multiple files - add breakpoint from filename
[n] add window affinity for buffer breaks - e.g. top. bottom, left, right, top-left, etc. - nah, maybe later
[x] fix buffer creating in new window when stepping through filename buffer. (e.g. start - bp - run - switch window - step - duplicate windows)
[x] create an option to allow buffers to be created from templates using jinja2 - e.g. a status window for C debugging.
[x] allow plugins from more than one path location - eg - base, plugins(common), plugins(specific) - sort of like Magento - for actions, config, filters, editor_wrappers, etc.
  - start at texpect path - specified path - additional paths specified in config - then plugin paths in config
  - should make a path priority list then iterate each one and grab config, actions, functions, etc.
  - do for: action.py, [functions, templates], editor_wrappers, filters, config.
  - use a config setting to call back to a previous config and build up a chain. e.g. settings.plugins.pre_load_config - could point to a base set of config and files to load first.
[x] figure out why test_c/filters/vg_base.py is still required after config chaining.
[n] (todo later) use arrays of files for filters, actions, functions, etc. to prevent lots of disk reads every time a command is run
[x] allow specifying actions from a config plugins path - done - not tested
[x] fix tests - add caching to all plugins
[l] add shell script function support (sort of like Ansible) args as a list on command line. Redirect stdout/stderr back as result. - maybe later
[x] fix freezing on vgdb -> set breakpoint -> step -> step - done - deleted swap file ./tests/binaries/c_test/.helper.c.swp
[x] make highlight line disappear when no longer debugging (no backtrace)
[m] figure out why freezing on vgruncommand run sometimes - monitor
 - steps: Vgdb -> set_breakpoint 6 -> run (freezes)
[n] implement multiple variable matches per command - eg backtrace - gives number but want a variable for error condition
 -  also backtrace can return current filename and current line number. maybe later
[x] get a golang app working from source and binary
[x] fix logging error when all classes selected for debugging
[x] make an easy way of tracking/logging config actions
[n] make run_vim_command use input_args instead of event_input_args (as per run_python_command) - delineate the difference and settle on one (or document both and why) - not needed
[x] add the abillity to scroll buffer to keep current breakpoint/highlight line visible - use vim :g - follow breakpoint option
[n] allow list_breakpoints command to be run before disassembly in config - currently displays depending on order - requires investigating buffer cache order and precedence - not sure - too long ago
[n] add the option of adding a name: key to commands (like ansible) - yeah, nah
[x] componentise python config to allow use on multiple editors - texpect (or expectoids) - as a pip package that installs all dependencies
[l] dig into some of these freezing errors - likely from leaving processes in zombie state after exit - later
[x] refactor any editor commands in actions (e.g. get_buffer) back to editor_wrapper for portability
[m] standardise all editor-specific calls from python to use the editor_wrapper (e.g. actions/set_buffer) - maybe later
[n] add other process support (e.g. ssh, terminals, log streams, etc) - too vague
[x] add ability to set a breakpoint/piet from the current line of code/disassembly
[x] add a basic readme to tide
[n] add better input validation/handling for startup and commands - e.g. set as variable, as argument to process, etc. - not yet
[x] add abillity to specify the file/binary to debug on startup
[x] fix docker stuff for tide
[x] add shortcut keys for debugging - to vimrc and document as an example
[x] fix docker stuff for vgdb
[x] make tide a pip package
[n] install tide in vgdb using pip - maybe later
[x] add a timer refresh config option - useful for streaming logs and sampling - would call a command on a timer - e.g. every 5 seconds (like watch)
[x] implement interface for editor functions (or a dynamic version) in editor_base.py - already done
[x] fix vgdb to pip install tide correctly
[x] fix tide.tide in pypi package - use __init__.py
[x] add readthedocs to tide
[x] add readthedocs to vgdb
[x] use /after path for PluginInstall to install Tide correctly when called
[x] allow different configs to be called from vim command line
[x] fix assembly debugging failing on jump to new code section - No function contains program counter for selected frame. - fixed with empty string checks
[x] fix c_test-stdio as vim81 not showing source file correctly
[x] split plugins into separate repo
[x] fix set_buffer#find_window
[x] move vg_display#run_buffer_commands() into tide.start() (with run option)
[x] move buffer startup logic from vgdb to tide (where possible)
[x] do atom with tide repo - atide
[x] add a cli to tide
[n] fix duplicate vg_code buffer showing with source file
[n] fix set_buffer running when is is not on_startup=true
[n] set keybindings from config file
[x] put all repos under separate github organisation
[x] fix template buffer not updating on set_Breakpoint for test_c
[x] get assembly working again
[x] use a makefile for all the commands in ./bin
[x] then get it working in atide
[n] split test harness stuff into separate repo
[x] fix highlight line for c_test-stdio
[n] implement command on startup log file (use pexpect)
