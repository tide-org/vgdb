[x] add nose tests for python components
[x] make all config_dicts call Config()
[x] implement 2-way event-driven vim to python variables - py to vim working - to implement reverse as required
[x] make plugins directory moveable
[x] allow defaults for config variables
[ ] create a list of all events in config and add them to an events list
[ ] create functions to trigger all events for different areas - before/after command, buffer updates, spawn and config commands
[x] refactor run_to_entrypoint into config.yml
[ ] make buffers only update when set in config with 'update_buffers'
[ ] wire up all the config yaml functions
[ ] make 'config_command' step
[ ] make create_string step
[ ] make 'run_command_string' step
[ ] make 'run_command' step
[ ] make 'vim_function_after_config_command' step
[ ] make 'run_command_with_match' step
[ ] make 'python_function' step
[ ] make 'vim_function' step
[ ] make 'command_with_match' step
[ ] make variables in config at startup
[ ] make all event steps and document: before_spawn, after_spawn, before_command, after_command, before_config_command, after_config_command, before_buffer_update, after_buffer_update
[ ] document all step types
[ ] create schematics of modules of app and workflows
[ ] handle case where disassemble does not know the end address of a section of assembly - 'No function contains program counter for selected frame.' - see (https://stackoverflow.com/questions/8201025/no-function-contains-program-counter-for-selected-frame/16629694)
[ ] gey pyyaml working correctly from autoload/lib path
[ ] step into disassembly code properly (when there are calls) and open new tabs as new disassembly is added. To use x/i $rip (as per https://stackoverflow.com/questions/1902901/show-current-assembly-instruction-in-gdb)
[x] refactor disassembly to be generic and in config template
[ ] refactor step, break, run, etc. to be generic and in config template
[ ] create command plugin architecture - e.g. run to entrypoint, command events - eg stepi
[ ] optimise calls to get breakpoints only when required (adding/removing)
[ ] refactor command_handler move post-command logic into separate class (check_set_remote) into command_processing (events) plugin path overrides for after_spawn and after_command
[ ] refactor vg_display into smaller classes
[ ] implement command on startup log file (use pexpect)
[ ] create command for graceful shutdown of vgdb
[ ] add ability to set a breakpoint from the current line of code/disassembly
[ ] determine best tty setting by testing (or fix not to catch exception on complete stream)
[ ] refresh breakpoints between steps on vg_disassembly
[ ] add option to only update registers and memory buffers when relevant commands have been run (step, stepi, continue, run, etc.)
[ ] add gdb error/warning buffer view and update with step
[ ] add local variables view buffer and update with step
[ ] add memory view buffers and update with step (requires variables for number, format, variable/register, etc.)
[ ] make stacking/abutting buffer-specific
[ ] add max windows per column - e.g. 4 windows down before starting a new column of buffers
[ ] add ability to scan for all source files for a binary
[ ] add ability to list all source files as tabs or using NerdTree
[ ] add editable settings screen buffer
[ ] add highlight for changed memory values between operations
[ ] use vim event loop for `BufUnload` when closing `vg_` buffers to prevent using bwipeout when fetching data (https://www.ibm.com/developerworks/library/l-vim-script-5/index.html)
[ ] add a status view buffer and update with step (to show os, bitness, target, target status, entrypoint addressi, current address)
[ ] add segments view buffer ( no update with step)
[ ] add sections view buffer ( no update with step)
[ ] add call stack view buffer and update with step (only if symbols loaded)
[ ] add thread view buffer and update with step
[ ] add debugging source functionality and open source files if present (start with .s files)
[ ] add shortcut keys for debugging
[ ] add edit register values functionality
[ ] add edit memory values functionality
[ ] add edit variable values functionality
[ ] add documentation
[ ] add gdb supported higher level languages support
[ ] add goto definition functionality
[ ] add interpreted languages support where possible
[ ] add scripting plugin support
[ ] add llvm support
[ ] add other process support (e.g. ssh, terminals, log streams, etc)
[ ] add xserver to docker-compose containers to make tests self-contained
