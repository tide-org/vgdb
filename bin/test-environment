#! /bin/sh -e

set -x

# Usage: bin/dev-up <path of binary to run>
#
# note: on MacOS, coreutils must be installed. e.g. `brew install coreutils`
#       on CentOS, you may need to run `yum install coreutils`

echo "no arg:" ${#}

cd $(dirname $0)/..

if [ ${#} -eq 0 ];
then
    BINARY_TO_RUN=hello_linux
    BINARY_LOCATION=../tests/binaries
else
    BINARY_LOCATION_RELATIVE=$(dirname "$1")
    BINARY_LOCATION=$(realpath ${BINARY_LOCATION_RELATIVE})
    BINARY_TO_RUN=$(basename "$1")
    shift 1
fi

echo "binary to run: " $BINARY_TO_RUN
echo "relative binary location: " $RELATIVE_BINARY_LOCATION
echo "binary location: " $BINARY_LOCATION

docker-compose -f docker/docker-compose-test.yml down
docker-compose -f docker/docker-compose-test.yml build
BINARY_TO_RUN=${BINARY_TO_RUN} BINARY_LOCATION=${BINARY_LOCATION} docker-compose -f docker/docker-compose-test.yml up -d --force-recreate test-gdbserver
BINARY_TO_RUN=${BINARY_TO_RUN} BINARY_LOCATION=${BINARY_LOCATION} docker-compose -f docker/docker-compose-test.yml run --rm --service-ports test-vim "${@-sh}"
