---

buffers:

    vg_watchpoints:
        command: 'list_watchpoints'

    vg_registers:
        command: 'list_registers'
        on_startup: false
        diff:
            show_diff: true
            buffer_input_cache_variable: 'registers_cache'

    vg_breakpoints:
        command: 'list_breakpoints'

    vg_session_log:
        scrolling_buffer: true
        on_startup: true

    vg_disassembly:
        command: 'display_disassembly'
        primary_window: true
        language: 'asm'
        highlight_line_variable: 'current_frame_address'
        piet_match_array_variable: 'breakpoints'
        on_startup: true

    vg_memory:
        command: 'list_memory'
        on_startup: false
        diff:
            show_diff: true
            buffer_input_cache_variable: 'memory_cache'

commands:
    list_memory:
        steps:

            - run_command:
                  command: 'x/40x $rsp'

    display_disassembly:
        steps:

            - run_config_command:
                name: 'list_breakpoints'
                buffer_name: 'vg_breakpoints'
                when: app_entrypoint != None

            - run_config_command:
                name: 'disassemble'
              when: no_program_counter == 0 and app_entrypoint != None

            - run_config_command:
                name: 'run_disassembly_in_range'
              when: no_program_counter == 1 and app_entrypoint != None

    run_disassembly_in_range:
        steps:

            - run_python_function:
                function_file: 'hex_helpers.py'
                function_name: 'check_address_in_range'
                input_args:
                  current_address: '{{ current_frame_address }}'
                  base_address: '{{ base_disassembly_address }}'
                  address_range: '{{ disassemble_frame_range }}'
                set_on_return: 'disassemble_is_in_range'
              when: base_disassembly_address != None

            - set_var:
                name: 'base_disassembly_address'
                value: '{{ current_frame_address }}'
              when: disassemble_is_in_range == 0 and current_frame_address != None

            - set_var:
                name: 'disassemble_range_command'
                value: 'disassemble {{ base_disassembly_address }}, {{ base_disassembly_address }}+{{ disassemble_frame_range }}'
              when: disassemble_is_in_range == 0 and base_disassembly_address != None

            - run_command_string:
                variable_name: 'disassemble_range_command'
                buffer_name: 'vg_disassembly'
              when: disassemble_range_command != None and current_frame_address != None

    disassemble:
        steps:

            - run_command:
                command: 'disassemble'
                buffer_name: 'vg_disassembly'

    list_breakpoints:
        steps:

            - run_command:
                command: 'info breakpoints'
                buffer_name: 'vg_breakpoints'

    list_watchpoints:
        steps:

            - run_command:
                command: 'info watchpoints'
                buffer_name: 'vg_watchpoints'

    list_registers:
        steps:

            - run_command:
                command: 'info registers'
                buffer_name: 'vg_registers'

    run_to_entrypoint:
        steps:

            - run_config_command:
                name: 'get_set_entrypoint'

            - create_interpolated_string:
                variable_name: 'breakpoint_command'
                value: 'break *{0}'
                args:
                  - 'app_entrypoint'

            - run_command_string:
                variable_name: 'breakpoint_command'

            - run_config_command:
                name: 'continue'

            - run_vim_function:
                function_file: 'run_to_entrypoint.vim'
                function_name: 'run_to_entrypoint#was_successful'

    get_set_entrypoint:
        steps:

            - run_command_with_match:
                command: 'info file'
                match: '(?<=Entry point: )0x[0-9a-f]{2,16}'
                try_set: 'app_entrypoint'

            - run_python_function:
                function_file: 'hex_helpers.py'
                function_name: 'pad_hexadecimal_to_64bit'
                input_args:
                  hex_string: '{{ app_entrypoint }}'
                set_on_return: 'app_entrypoint'

    connect_to_remote:
        steps:

            - create_interpolated_string:
                variable_name: 'target_remote_command'
                value: 'target remote {0}'
                args:
                  - 'remote_address'

            - run_command_string:
                variable_name: 'target_remote_command'

    stepi:
        steps:

            - run_command_with_match:
                command: 'stepi'
                match: '0x[0-9a-f]{2,16}'
                try_set: 'current_frame_address'
        update_buffers: true

    continue:
        steps:

            - run_command_with_match:
                command: 'continue'
                match: '0x[0-9a-f]{2,16}'
                try_set: 'current_frame_address'
        update_buffers: true

    run_user_command:
        steps:

            - run_command_string:
                variable_name: 'user_input_args'

variables:

    current_frame_address:
    app_entrypoint:
    binary_loaded: 0
    symbols_loaded: 0
    remote_target: 0
    remote_address: 'localhost:9999'
    connect_to_remote: 1
    breakpoints:
    registers_cache:
    memory_cache:
    no_program_counter: 0
    disassemble_is_in_range: 0
    disassemble_frame_range: 256
    base_disassembly_address:
    disassemble_range_command:

events:

    before_spawn:
    after_spawn:
    before_startup:
    after_startup:
        - 'connect_to_remote'
        - 'run_to_entrypoint'
    before_config_command:
    after_config_command:
    before_command:
    after_command:
        - function_file: 'after_command.py'
          function_name: 'check_set_remote'
    before_buffer_update:
    after_buffer_update:

settings:

    logging:
        use_session_log_file: true
        session_log_filename: 'vgdb_session.log'
        session_buffer_name: 'vg_session_log'
        add_timestamp: true

    buffers:
        base_filter: 'vg_base'
        error_filter: 'vg_error'
        error_input_variable: 'error_result'
        load_on_start: 'vg_disassembly'
        stack_buffers_by_default: 1
        stack_buffer_window_width: 60
        open_buffers_on_startup: 1

    process:
        ttl_stream_timeout: 0.09
        run_command_on_startup: 0
        command_to_run_on_startup: 'bin/dev-up'
        command_on_startup_log_file: 'vgdb_startup.log'
        main_process_name: 'gdb'
        main_process_default_arguments: ' -q --interpreter=mi2 '
        find_full_process_name: 'true'
        end_of_output_regex: '\(gdb\)'

    plugins:
        actions_path: "./plugins/actions"
        filters_path: "./plugins/filters"
        functions_path: "./plugins/functions"
